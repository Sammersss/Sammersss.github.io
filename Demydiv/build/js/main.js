function getDate(){var e,t=new Array("неділя","понеділок","вівторок","середа","четвер","пятниця","субота"),n=new Array("січня","лютого","березня","квітня","травня","червня","липня","серпня","вересня","жовтня","листопа","грудня"),r=new Date,i=t[r.getDay()],o=n[r.getMonth()],a=r.getDate(),s=r.getFullYear(),l=r.getHours(),u=r.getMinutes(),c=r.getSeconds();10>l&&(l="0"+l),10>u&&(u="0"+u),10>c&&(c="0"+c),l>=5&&12>l?e="Доброго ранку ! ":l>=12&&18>l?e="Доброго дня ! ":l>=18&&24>l?e="Доброго вечора ! ":l>=0&&5>l&&(e="Доброї ночі ! "),document.getElementById("daydisplay").innerHTML=e+'&nbsp; &nbsp;<span class="fa fa-calendar"></span> &nbsp;Сьогодні &nbsp;:&nbsp;'+i+"&nbsp;"+a+"&nbsp;"+o+"&nbsp;"+s+"&nbsp; року",document.getElementById("timedisplay").innerHTML='<span class="fa fa-clock-o"></span>&nbsp;&nbsp;'+l+":"+u+":"+c}!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"===n||fe.isWindow(e)?!1:"array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e}function r(e,t,n){if(fe.isFunction(t))return fe.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return fe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(_e.test(t))return fe.filter(t,e,n);t=fe.filter(t,e)}return fe.grep(e,function(e){return fe.inArray(e,t)>-1!==n})}function i(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function o(e){var t={};return fe.each(e.match(Ee)||[],function(e,n){t[n]=!0}),t}function a(){re.addEventListener?(re.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s)):(re.detachEvent("onreadystatechange",s),e.detachEvent("onload",s))}function s(){(re.addEventListener||"load"===e.event.type||"complete"===re.readyState)&&(a(),fe.ready())}function l(e,t,n){if(void 0===n&&1===e.nodeType){var r="data-"+t.replace(He,"-$1").toLowerCase();if(n=e.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Le.test(n)?fe.parseJSON(n):n}catch(i){}fe.data(e,t,n)}else n=void 0}return n}function u(e){var t;for(t in e)if(("data"!==t||!fe.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function c(e,t,n,r){if(Ae(e)){var i,o,a=fe.expando,s=e.nodeType,l=s?fe.cache:e,u=s?e[a]:e[a]&&a;if(u&&l[u]&&(r||l[u].data)||void 0!==n||"string"!=typeof t)return u||(u=s?e[a]=ne.pop()||fe.guid++:a),l[u]||(l[u]=s?{}:{toJSON:fe.noop}),"object"!=typeof t&&"function"!=typeof t||(r?l[u]=fe.extend(l[u],t):l[u].data=fe.extend(l[u].data,t)),o=l[u],r||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[fe.camelCase(t)]=n),"string"==typeof t?(i=o[t],null==i&&(i=o[fe.camelCase(t)])):i=o,i}}function d(e,t,n){if(Ae(e)){var r,i,o=e.nodeType,a=o?fe.cache:e,s=o?e[fe.expando]:fe.expando;if(a[s]){if(t&&(r=n?a[s]:a[s].data)){fe.isArray(t)?t=t.concat(fe.map(t,fe.camelCase)):t in r?t=[t]:(t=fe.camelCase(t),t=t in r?[t]:t.split(" ")),i=t.length;for(;i--;)delete r[t[i]];if(n?!u(r):!fe.isEmptyObject(r))return}(n||(delete a[s].data,u(a[s])))&&(o?fe.cleanData([e],!0):de.deleteExpando||a!=a.window?delete a[s]:a[s]=void 0)}}}function p(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return fe.css(e,t,"")},l=s(),u=n&&n[3]||(fe.cssNumber[t]?"":"px"),c=(fe.cssNumber[t]||"px"!==u&&+l)&&Oe.exec(fe.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do o=o||".5",c/=o,fe.style(e,t,c+u);while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}function f(e){var t=ze.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function h(e,t){var n,r,i=0,o="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):void 0;if(!o)for(o=[],n=e.childNodes||e;null!=(r=n[i]);i++)!t||fe.nodeName(r,t)?o.push(r):fe.merge(o,h(r,t));return void 0===t||t&&fe.nodeName(e,t)?fe.merge([e],o):o}function g(e,t){for(var n,r=0;null!=(n=e[r]);r++)fe._data(n,"globalEval",!t||fe._data(t[r],"globalEval"))}function m(e){Re.test(e.type)&&(e.defaultChecked=e.checked)}function y(e,t,n,r,i){for(var o,a,s,l,u,c,d,p=e.length,y=f(t),v=[],b=0;p>b;b++)if(a=e[b],a||0===a)if("object"===fe.type(a))fe.merge(v,a.nodeType?[a]:a);else if(Ue.test(a)){for(l=l||y.appendChild(t.createElement("div")),u=(Be.exec(a)||["",""])[1].toLowerCase(),d=Xe[u]||Xe._default,l.innerHTML=d[1]+fe.htmlPrefilter(a)+d[2],o=d[0];o--;)l=l.lastChild;if(!de.leadingWhitespace&&We.test(a)&&v.push(t.createTextNode(We.exec(a)[0])),!de.tbody)for(a="table"!==u||Ve.test(a)?"<table>"!==d[1]||Ve.test(a)?0:l:l.firstChild,o=a&&a.childNodes.length;o--;)fe.nodeName(c=a.childNodes[o],"tbody")&&!c.childNodes.length&&a.removeChild(c);for(fe.merge(v,l.childNodes),l.textContent="";l.firstChild;)l.removeChild(l.firstChild);l=y.lastChild}else v.push(t.createTextNode(a));for(l&&y.removeChild(l),de.appendChecked||fe.grep(h(v,"input"),m),b=0;a=v[b++];)if(r&&fe.inArray(a,r)>-1)i&&i.push(a);else if(s=fe.contains(a.ownerDocument,a),l=h(y.appendChild(a),"script"),s&&g(l),n)for(o=0;a=l[o++];)$e.test(a.type||"")&&n.push(a);return l=null,y}function v(){return!0}function b(){return!1}function x(){try{return re.activeElement}catch(e){}}function w(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)w(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=b;else if(!i)return e;return 1===o&&(a=i,i=function(e){return fe().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,i,r,n)})}function j(e,t){return fe.nodeName(e,"table")&&fe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function _(e){return e.type=(null!==fe.find.attr(e,"type"))+"/"+e.type,e}function C(e){var t=it.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function T(e,t){if(1===t.nodeType&&fe.hasData(e)){var n,r,i,o=fe._data(e),a=fe._data(t,o),s=o.events;if(s){delete a.handle,a.events={};for(n in s)for(r=0,i=s[n].length;i>r;r++)fe.event.add(t,n,s[n][r])}a.data&&(a.data=fe.extend({},a.data))}}function k(e,t){var n,r,i;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!de.noCloneEvent&&t[fe.expando]){i=fe._data(t);for(r in i.events)fe.removeEvent(t,r,i.handle);t.removeAttribute(fe.expando)}"script"===n&&t.text!==e.text?(_(t).text=e.text,C(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),de.html5Clone&&e.innerHTML&&!fe.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&Re.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}function D(e,t,n,r){t=oe.apply([],t);var i,o,a,s,l,u,c=0,d=e.length,p=d-1,f=t[0],g=fe.isFunction(f);if(g||d>1&&"string"==typeof f&&!de.checkClone&&rt.test(f))return e.each(function(i){var o=e.eq(i);g&&(t[0]=f.call(this,i,o.html())),D(o,t,n,r)});if(d&&(u=y(t,e[0].ownerDocument,!1,e,r),i=u.firstChild,1===u.childNodes.length&&(u=i),i||r)){for(s=fe.map(h(u,"script"),_),a=s.length;d>c;c++)o=u,c!==p&&(o=fe.clone(o,!0,!0),a&&fe.merge(s,h(o,"script"))),n.call(e[c],o,c);if(a)for(l=s[s.length-1].ownerDocument,fe.map(s,C),c=0;a>c;c++)o=s[c],$e.test(o.type||"")&&!fe._data(o,"globalEval")&&fe.contains(l,o)&&(o.src?fe._evalUrl&&fe._evalUrl(o.src):fe.globalEval((o.text||o.textContent||o.innerHTML||"").replace(ot,"")));u=i=null}return e}function N(e,t,n){for(var r,i=t?fe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||fe.cleanData(h(r)),r.parentNode&&(n&&fe.contains(r.ownerDocument,r)&&g(h(r,"script")),r.parentNode.removeChild(r));return e}function E(e,t){var n=fe(t.createElement(e)).appendTo(t.body),r=fe.css(n[0],"display");return n.detach(),r}function S(e){var t=re,n=ut[e];return n||(n=E(e,t),"none"!==n&&n||(lt=(lt||fe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(lt[0].contentWindow||lt[0].contentDocument).document,t.write(),t.close(),n=E(e,t),lt.detach()),ut[e]=n),n}function M(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function A(e){if(e in Ct)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=_t.length;n--;)if(e=_t[n]+t,e in Ct)return e}function L(e,t){for(var n,r,i,o=[],a=0,s=e.length;s>a;a++)r=e[a],r.style&&(o[a]=fe._data(r,"olddisplay"),n=r.style.display,t?(o[a]||"none"!==n||(r.style.display=""),""===r.style.display&&Fe(r)&&(o[a]=fe._data(r,"olddisplay",S(r.nodeName)))):(i=Fe(r),(n&&"none"!==n||!i)&&fe._data(r,"olddisplay",i?n:fe.css(r,"display"))));for(a=0;s>a;a++)r=e[a],r.style&&(t&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=t?o[a]||"":"none"));return e}function H(e,t,n){var r=xt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):t}function q(e,t,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===t?1:0,a=0;4>o;o+=2)"margin"===n&&(a+=fe.css(e,n+Ie[o],!0,i)),r?("content"===n&&(a-=fe.css(e,"padding"+Ie[o],!0,i)),"margin"!==n&&(a-=fe.css(e,"border"+Ie[o]+"Width",!0,i))):(a+=fe.css(e,"padding"+Ie[o],!0,i),"padding"!==n&&(a+=fe.css(e,"border"+Ie[o]+"Width",!0,i)));return a}function O(e,t,n){var r=!0,i="width"===t?e.offsetWidth:e.offsetHeight,o=ht(e),a=de.boxSizing&&"border-box"===fe.css(e,"boxSizing",!1,o);if(0>=i||null==i){if(i=gt(e,t,o),(0>i||null==i)&&(i=e.style[t]),dt.test(i))return i;r=a&&(de.boxSizingReliable()||i===e.style[t]),i=parseFloat(i)||0}return i+q(e,t,n||(a?"border":"content"),r,o)+"px"}function I(e,t,n,r,i){return new I.prototype.init(e,t,n,r,i)}function F(){return e.setTimeout(function(){Tt=void 0}),Tt=fe.now()}function P(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=Ie[i],r["margin"+n]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function R(e,t,n){for(var r,i=(W.tweeners[t]||[]).concat(W.tweeners["*"]),o=0,a=i.length;a>o;o++)if(r=i[o].call(n,t,e))return r}function B(e,t,n){var r,i,o,a,s,l,u,c,d=this,p={},f=e.style,h=e.nodeType&&Fe(e),g=fe._data(e,"fxshow");n.queue||(s=fe._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],u=fe.css(e,"display"),c="none"===u?fe._data(e,"olddisplay")||S(e.nodeName):u,"inline"===c&&"none"===fe.css(e,"float")&&(de.inlineBlockNeedsLayout&&"inline"!==S(e.nodeName)?f.zoom=1:f.display="inline-block")),n.overflow&&(f.overflow="hidden",de.shrinkWrapBlocks()||d.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],Dt.exec(i)){if(delete t[r],o=o||"toggle"===i,i===(h?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;h=!0}p[r]=g&&g[r]||fe.style(e,r)}else u=void 0;if(fe.isEmptyObject(p))"inline"===("none"===u?S(e.nodeName):u)&&(f.display=u);else{g?"hidden"in g&&(h=g.hidden):g=fe._data(e,"fxshow",{}),o&&(g.hidden=!h),h?fe(e).show():d.done(function(){fe(e).hide()}),d.done(function(){var t;fe._removeData(e,"fxshow");for(t in p)fe.style(e,t,p[t])});for(r in p)a=R(h?g[r]:0,r,d),r in g||(g[r]=a.start,h&&(a.end=a.start,a.start="width"===r||"height"===r?1:0))}}function $(e,t){var n,r,i,o,a;for(n in e)if(r=fe.camelCase(n),i=t[r],o=e[n],fe.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=fe.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function W(e,t,n){var r,i,o=0,a=W.prefilters.length,s=fe.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=Tt||F(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,a=0,l=u.tweens.length;l>a;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),1>o&&l?n:(s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:Tt||F(),duration:n.duration,tweens:[],createTween:function(t,n){var r=fe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for($(c,u.opts.specialEasing);a>o;o++)if(r=W.prefilters[o].call(u,e,c,u.opts))return fe.isFunction(r.stop)&&(fe._queueHooks(u.elem,u.opts.queue).stop=fe.proxy(r.stop,r)),r;return fe.map(c,R,u),fe.isFunction(u.opts.start)&&u.opts.start.call(e,u),fe.fx.timer(fe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function z(e){return fe.attr(e,"class")||""}function X(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(Ee)||[];if(fe.isFunction(n))for(;r=o[i++];)"+"===r.charAt(0)?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function U(e,t,n,r){function i(s){var l;return o[s]=!0,fe.each(e[s]||[],function(e,s){var u=s(t,n,r);return"string"!=typeof u||a||o[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var o={},a=e===Kt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function V(e,t){var n,r,i=fe.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((i[r]?e:n||(n={}))[r]=t[r]);return n&&fe.extend(!0,e,n),e}function Y(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in s)if(s[a]&&s[a].test(i)){l.unshift(a);break}if(l[0]in n)o=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){o=a;break}r||(r=a)}o=o||r}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function G(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(a=u[l+" "+o]||u["* "+o],!a)for(i in u)if(s=i.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){a===!0?a=u[i]:u[i]!==!0&&(o=s[0],c.unshift(s[1]));break}if(a!==!0)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(d){return{state:"parsererror",error:a?d:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}function J(e){return e.style&&e.style.display||fe.css(e,"display")}function Q(e){if(!fe.contains(e.ownerDocument||re,e))return!0;for(;e&&1===e.nodeType;){if("none"===J(e)||"hidden"===e.type)return!0;e=e.parentNode}return!1}function K(e,t,n,r){var i;if(fe.isArray(t))fe.each(t,function(t,i){n||rn.test(e)?r(e,i):K(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==fe.type(t))r(e,t);else for(i in t)K(e+"["+i+"]",t[i],n,r)}function Z(){try{return new e.XMLHttpRequest}catch(t){}}function ee(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function te(e){return fe.isWindow(e)?e:9===e.nodeType?e.defaultView||e.parentWindow:!1}var ne=[],re=e.document,ie=ne.slice,oe=ne.concat,ae=ne.push,se=ne.indexOf,le={},ue=le.toString,ce=le.hasOwnProperty,de={},pe="1.12.4",fe=function(e,t){return new fe.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ge=/^-ms-/,me=/-([\da-z])/gi,ye=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:pe,constructor:fe,selector:"",length:0,toArray:function(){return ie.call(this)},get:function(e){return null!=e?0>e?this[e+this.length]:this[e]:ie.call(this)},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ie.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:ne.sort,splice:ne.splice},fe.extend=fe.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||fe.isFunction(a)||(a={}),s===l&&(a=this,s--);l>s;s++)if(null!=(i=arguments[s]))for(r in i)e=a[r],n=i[r],a!==n&&(u&&n&&(fe.isPlainObject(n)||(t=fe.isArray(n)))?(t?(t=!1,o=e&&fe.isArray(e)?e:[]):o=e&&fe.isPlainObject(e)?e:{},a[r]=fe.extend(u,o,n)):void 0!==n&&(a[r]=n));return a},fe.extend({expando:"jQuery"+(pe+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isArray:Array.isArray||function(e){return"array"===fe.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){var t=e&&e.toString();return!fe.isArray(e)&&t-parseFloat(t)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==fe.type(e)||e.nodeType||fe.isWindow(e))return!1;try{if(e.constructor&&!ce.call(e,"constructor")&&!ce.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}if(!de.ownFirst)for(t in e)return ce.call(e,t);for(t in e);return void 0===t||ce.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ue.call(e)]||"object":typeof e},globalEval:function(t){t&&fe.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(ge,"ms-").replace(me,ye)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var r,i=0;if(n(e))for(r=e.length;r>i&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var r=t||[];return null!=e&&(n(Object(e))?fe.merge(r,"string"==typeof e?[e]:e):ae.call(r,e)),r},inArray:function(e,t,n){var r;if(t){if(se)return se.call(t,e,n);for(r=t.length,n=n?0>n?Math.max(0,r+n):n:0;r>n;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;n>r;)e[i++]=t[r++];if(n!==n)for(;void 0!==t[r];)e[i++]=t[r++];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;a>o;o++)r=!t(e[o],o),r!==s&&i.push(e[o]);return i},map:function(e,t,r){var i,o,a=0,s=[];if(n(e))for(i=e.length;i>a;a++)o=t(e[a],a,r),null!=o&&s.push(o);else for(a in e)o=t(e[a],a,r),null!=o&&s.push(o);return oe.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;return"string"==typeof t&&(i=e[t],t=e,e=i),fe.isFunction(e)?(n=ie.call(arguments,2),r=function(){return e.apply(t||this,n.concat(ie.call(arguments)))},r.guid=e.guid=e.guid||fe.guid++,r):void 0},now:function(){return+new Date},support:de}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=ne[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var ve=function(e){function t(e,t,n,r){var i,o,a,s,l,u,d,f,h=t&&t.ownerDocument,g=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==g&&9!==g&&11!==g)return n;if(!r&&((t?t.ownerDocument||t:R)!==A&&M(t),t=t||A,H)){if(11!==g&&(u=ye.exec(e)))if(i=u[1]){if(9===g){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(h&&(a=h.getElementById(i))&&F(t,a)&&a.id===i)return n.push(a),n}else{if(u[2])return K.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&w.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(i)),n}if(w.qsa&&!X[e+" "]&&(!q||!q.test(e))){if(1!==g)h=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,"\\$&"):t.setAttribute("id",s=P),d=T(e),o=d.length,l=pe.test(s)?"#"+s:"[id='"+s+"']";o--;)d[o]=l+" "+p(d[o]);f=d.join(","),h=ve.test(e)&&c(t.parentNode)||t}if(f)try{return K.apply(n,h.querySelectorAll(f)),n}catch(m){}finally{s===P&&t.removeAttribute("id")}}}return D(e.replace(se,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>j.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[P]=!0,e}function i(e){var t=A.createElement("div");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)j.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||V)-(~e.sourceIndex||V);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function l(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function u(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function c(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function d(){}function p(e){for(var t=0,n=e.length,r="";n>t;t++)r+=e[t].value;return r}function f(e,t,n){var r=t.dir,i=n&&"parentNode"===r,o=$++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||i)return e(t,n,o)}:function(t,n,a){var s,l,u,c=[B,o];if(a){for(;t=t[r];)if((1===t.nodeType||i)&&e(t,n,a))return!0}else for(;t=t[r];)if(1===t.nodeType||i){if(u=t[P]||(t[P]={}),l=u[t.uniqueID]||(u[t.uniqueID]={}),(s=l[r])&&s[0]===B&&s[1]===o)return c[2]=s[2];if(l[r]=c,c[2]=e(t,n,a))return!0}}}function h(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function g(e,n,r){for(var i=0,o=n.length;o>i;i++)t(e,n[i],r);return r}function m(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;l>s;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function y(e,t,n,i,o,a){return i&&!i[P]&&(i=y(i)),o&&!o[P]&&(o=y(o,a)),r(function(r,a,s,l){var u,c,d,p=[],f=[],h=a.length,y=r||g(t||"*",s.nodeType?[s]:s,[]),v=!e||!r&&t?y:m(y,p,e,s,l),b=n?o||(r?e:h||i)?[]:a:v;if(n&&n(v,b,s,l),i)for(u=m(b,f),i(u,[],s,l),c=u.length;c--;)(d=u[c])&&(b[f[c]]=!(v[f[c]]=d));if(r){if(o||e){if(o){for(u=[],c=b.length;c--;)(d=b[c])&&u.push(v[c]=d);o(null,b=[],u,l)}for(c=b.length;c--;)(d=b[c])&&(u=o?ee(r,d):p[c])>-1&&(r[u]=!(a[u]=d))}}else b=m(b===a?b.splice(h,b.length):b),o?o(null,a,b,l):K.apply(a,b)})}function v(e){for(var t,n,r,i=e.length,o=j.relative[e[0].type],a=o||j.relative[" "],s=o?1:0,l=f(function(e){return e===t},a,!0),u=f(function(e){return ee(t,e)>-1},a,!0),c=[function(e,n,r){var i=!o&&(r||n!==N)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];i>s;s++)if(n=j.relative[e[s].type])c=[f(h(c),n)];else{if(n=j.filter[e[s].type].apply(null,e[s].matches),n[P]){for(r=++s;i>r&&!j.relative[e[r].type];r++);return y(s>1&&h(c),s>1&&p(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(se,"$1"),n,r>s&&v(e.slice(s,r)),i>r&&v(e=e.slice(r)),i>r&&p(e))}c.push(n)}return h(c)}function b(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,l,u){var c,d,p,f=0,h="0",g=r&&[],y=[],v=N,b=r||o&&j.find.TAG("*",u),x=B+=null==v?1:Math.random()||.1,w=b.length;for(u&&(N=a===A||a||u);h!==w&&null!=(c=b[h]);h++){if(o&&c){for(d=0,a||c.ownerDocument===A||(M(c),s=!H);p=e[d++];)if(p(c,a||A,s)){l.push(c);break}u&&(B=x)}i&&((c=!p&&c)&&f--,r&&g.push(c))}if(f+=h,i&&h!==f){for(d=0;p=n[d++];)p(g,y,a,s);if(r){if(f>0)for(;h--;)g[h]||y[h]||(y[h]=J.call(l));y=m(y)}K.apply(l,y),u&&!r&&y.length>0&&f+n.length>1&&t.uniqueSort(l)}return u&&(B=x,N=v),g};return i?r(a):a}var x,w,j,_,C,T,k,D,N,E,S,M,A,L,H,q,O,I,F,P="sizzle"+1*new Date,R=e.document,B=0,$=0,W=n(),z=n(),X=n(),U=function(e,t){return e===t&&(S=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],J=G.pop,Q=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;r>n;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),se=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),le=new RegExp("^"+ne+"*,"+ne+"*"),ue=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ce=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(oe),pe=new RegExp("^"+re+"$"),fe={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,me=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ve=/[+~]/,be=/'|\\/g,xe=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},je=function(){M()};try{K.apply(G=Z.call(R.childNodes),R.childNodes),G[R.childNodes.length].nodeType}catch(_e){K={apply:G.length?function(e,t){Q.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}w=t.support={},C=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?"HTML"!==t.nodeName:!1},M=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:R;return r!==A&&9===r.nodeType&&r.documentElement?(A=r,L=A.documentElement,H=!C(A),(n=A.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",je,!1):n.attachEvent&&n.attachEvent("onunload",je)),w.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=i(function(e){return e.appendChild(A.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=me.test(A.getElementsByClassName),w.getById=i(function(e){return L.appendChild(e).id=P,!A.getElementsByName||!A.getElementsByName(P).length}),w.getById?(j.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&H){var n=t.getElementById(e);return n?[n]:[]}},j.filter.ID=function(e){var t=e.replace(xe,we);return function(e){return e.getAttribute("id")===t}}):(delete j.find.ID,j.filter.ID=function(e){var t=e.replace(xe,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),j.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},j.find.CLASS=w.getElementsByClassName&&function(e,t){return"undefined"!=typeof t.getElementsByClassName&&H?t.getElementsByClassName(e):void 0},O=[],q=[],(w.qsa=me.test(A.querySelectorAll))&&(i(function(e){L.appendChild(e).innerHTML="<a id='"+P+"'></a><select id='"+P+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||q.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+P+"-]").length||q.push("~="),e.querySelectorAll(":checked").length||q.push(":checked"),e.querySelectorAll("a#"+P+"+*").length||q.push(".#.+[+~]")}),i(function(e){var t=A.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&q.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),q.push(",.*:")})),(w.matchesSelector=me.test(I=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&i(function(e){w.disconnectedMatch=I.call(e,"div"),I.call(e,"[s!='']:x"),O.push("!=",oe)}),q=q.length&&new RegExp(q.join("|")),O=O.length&&new RegExp(O.join("|")),t=me.test(L.compareDocumentPosition),F=t||me.test(L.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},U=t?function(e,t){if(e===t)return S=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===A||e.ownerDocument===R&&F(R,e)?-1:t===A||t.ownerDocument===R&&F(R,t)?1:E?ee(E,e)-ee(E,t):0:4&n?-1:1)}:function(e,t){if(e===t)return S=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],l=[t];if(!i||!o)return e===A?-1:t===A?1:i?-1:o?1:E?ee(E,e)-ee(E,t):0;if(i===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[r]===l[r];)r++;return r?a(s[r],l[r]):s[r]===R?-1:l[r]===R?1:0},A):A},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==A&&M(e),n=n.replace(ce,"='$1']"),w.matchesSelector&&H&&!X[n+" "]&&(!O||!O.test(n))&&(!q||!q.test(n)))try{var r=I.call(e,n);if(r||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return t(n,A,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==A&&M(e),F(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==A&&M(e);var n=j.attrHandle[t.toLowerCase()],r=n&&Y.call(j.attrHandle,t.toLowerCase())?n(e,t,!H):void 0;return void 0!==r?r:w.attributes||!H?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(S=!w.detectDuplicates,E=!w.sortStable&&e.slice(0),e.sort(U),S){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return E=null,e},_=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=_(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=_(t);return n},j=t.selectors={cacheLength:50,createPseudo:r,match:fe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,we),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return fe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){
var o=t.attr(i,e);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,p,f,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),v=!l&&!s,b=!1;if(m){if(o){for(;g;){for(p=t;p=p[g];)if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&v){for(p=m,d=p[P]||(p[P]={}),c=d[p.uniqueID]||(d[p.uniqueID]={}),u=c[e]||[],f=u[0]===B&&u[1],b=f&&u[2],p=f&&m.childNodes[f];p=++f&&p&&p[g]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[B,f,b];break}}else if(v&&(p=t,d=p[P]||(p[P]={}),c=d[p.uniqueID]||(d[p.uniqueID]={}),u=c[e]||[],f=u[0]===B&&u[1],b=f),b===!1)for(;(p=++f&&p&&p[g]||(b=f=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==y:1!==p.nodeType)||!++b||(v&&(d=p[P]||(p[P]={}),c=d[p.uniqueID]||(d[p.uniqueID]={}),c[e]=[B,b]),p!==t)););return b-=i,b===r||b%r===0&&b/r>=0}}},PSEUDO:function(e,n){var i,o=j.pseudos[e]||j.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[P]?o(n):o.length>1?(i=[e,e,"",n],j.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=ee(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=k(e.replace(se,"$1"));return i[P]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(xe,we),function(t){return(t.textContent||t.innerText||_(t)).indexOf(e)>-1}}),lang:r(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,we).toLowerCase(),function(t){var n;do if(n=H?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===L},focus:function(e){return e===A.activeElement&&(!A.hasFocus||A.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!j.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:u(function(){return[0]}),last:u(function(e,t){return[t-1]}),eq:u(function(e,t,n){return[0>n?n+t:n]}),even:u(function(e,t){for(var n=0;t>n;n+=2)e.push(n);return e}),odd:u(function(e,t){for(var n=1;t>n;n+=2)e.push(n);return e}),lt:u(function(e,t,n){for(var r=0>n?n+t:n;--r>=0;)e.push(r);return e}),gt:u(function(e,t,n){for(var r=0>n?n+t:n;++r<t;)e.push(r);return e})}},j.pseudos.nth=j.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})j.pseudos[x]=s(x);for(x in{submit:!0,reset:!0})j.pseudos[x]=l(x);return d.prototype=j.filters=j.pseudos,j.setFilters=new d,T=t.tokenize=function(e,n){var r,i,o,a,s,l,u,c=z[e+" "];if(c)return n?0:c.slice(0);for(s=e,l=[],u=j.preFilter;s;){r&&!(i=le.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),r=!1,(i=ue.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(se," ")}),s=s.slice(r.length));for(a in j.filter)!(i=fe[a].exec(s))||u[a]&&!(i=u[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):z(e,l).slice(0)},k=t.compile=function(e,t){var n,r=[],i=[],o=X[e+" "];if(!o){for(t||(t=T(e)),n=t.length;n--;)o=v(t[n]),o[P]?r.push(o):i.push(o);o=X(e,b(i,r)),o.selector=e}return o},D=t.select=function(e,t,n,r){var i,o,a,s,l,u="function"==typeof e&&e,d=!r&&T(e=u.selector||e);if(n=n||[],1===d.length){if(o=d[0]=d[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&w.getById&&9===t.nodeType&&H&&j.relative[o[1].type]){if(t=(j.find.ID(a.matches[0].replace(xe,we),t)||[])[0],!t)return n;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=fe.needsContext.test(e)?0:o.length;i--&&(a=o[i],!j.relative[s=a.type]);)if((l=j.find[s])&&(r=l(a.matches[0].replace(xe,we),ve.test(o[0].type)&&c(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&p(o),!e)return K.apply(n,r),n;break}}return(u||k(e,d))(r,t,!H,n,!t||ve.test(e)&&c(t.parentNode)||t),n},w.sortStable=P.split("").sort(U).join("")===P,w.detectDuplicates=!!S,M(),w.sortDetached=i(function(e){return 1&e.compareDocumentPosition(A.createElement("div"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){return n?void 0:e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){return n||"input"!==e.nodeName.toLowerCase()?void 0:e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;return n?void 0:e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);fe.find=ve,fe.expr=ve.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=ve.uniqueSort,fe.text=ve.getText,fe.isXMLDoc=ve.isXML,fe.contains=ve.contains;var be=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&fe(e).is(n))break;r.push(e)}return r},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},we=fe.expr.match.needsContext,je=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,_e=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?fe.find.matchesSelector(r,e)?[r]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;i>t;t++)if(fe.contains(r[t],this))return!0}));for(t=0;i>t;t++)fe.find(e,r[t],n);return n=this.pushStack(i>1?fe.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&we.test(e)?fe(e):e||[],!1).length}});var Ce,Te=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ke=fe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Ce,"string"==typeof e){if(r="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:Te.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:re,!0)),je.test(r[1])&&fe.isPlainObject(t))for(r in t)fe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}if(i=re.getElementById(r[2]),i&&i.parentNode){if(i.id!==r[2])return Ce.find(e);this.length=1,this[0]=i}return this.context=re,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):fe.isFunction(e)?"undefined"!=typeof n.ready?n.ready(e):e(fe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),fe.makeArray(e,this))};ke.prototype=fe.fn,Ce=fe(re);var De=/^(?:parents|prev(?:Until|All))/,Ne={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t,n=fe(e,this),r=n.length;return this.filter(function(){for(t=0;r>t;t++)if(fe.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,r=0,i=this.length,o=[],a=we.test(e)||"string"!=typeof e?fe(e,t||this.context):0;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?fe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?fe.inArray(this[0],fe(e)):fe.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,n){return be(e,"parentNode",n)},next:function(e){return i(e,"nextSibling")},prev:function(e){return i(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,n){return be(e,"nextSibling",n)},prevUntil:function(e,t,n){return be(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return fe.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:fe.merge([],e.childNodes)}},function(e,t){fe.fn[e]=function(n,r){var i=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=fe.filter(r,i)),this.length>1&&(Ne[e]||(i=fe.uniqueSort(i)),De.test(e)&&(i=i.reverse())),this.pushStack(i)}});var Ee=/\S+/g;fe.Callbacks=function(e){e="string"==typeof e?o(e):fe.extend({},e);var t,n,r,i,a=[],s=[],l=-1,u=function(){for(i=e.once,r=t=!0;s.length;l=-1)for(n=s.shift();++l<a.length;)a[l].apply(n[0],n[1])===!1&&e.stopOnFalse&&(l=a.length,n=!1);e.memory||(n=!1),t=!1,i&&(a=n?[]:"")},c={add:function(){return a&&(n&&!t&&(l=a.length-1,s.push(n)),function r(t){fe.each(t,function(t,n){fe.isFunction(n)?e.unique&&c.has(n)||a.push(n):n&&n.length&&"string"!==fe.type(n)&&r(n)})}(arguments),n&&!t&&u()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,a,n))>-1;)a.splice(n,1),l>=n&&l--}),this},has:function(e){return e?fe.inArray(e,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return i=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return i=!0,n||c.disable(),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},fe.extend({Deferred:function(e){var t=[["resolve","done",fe.Callbacks("once memory"),"resolved"],["reject","fail",fe.Callbacks("once memory"),"rejected"],["notify","progress",fe.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return fe.Deferred(function(n){fe.each(t,function(t,o){var a=fe.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[o[0]+"With"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?fe.extend(e,r):r}},i={};return r.pipe=r.then,fe.each(t,function(e,o){var a=o[2],s=o[3];r[o[1]]=a.add,s&&a.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=a.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t,n,r,i=0,o=ie.call(arguments),a=o.length,s=1!==a||e&&fe.isFunction(e.promise)?a:0,l=1===s?e:fe.Deferred(),u=function(e,n,r){return function(i){n[e]=this,r[e]=arguments.length>1?ie.call(arguments):i,r===t?l.notifyWith(n,r):--s||l.resolveWith(n,r)}};if(a>1)for(t=new Array(a),n=new Array(a),r=new Array(a);a>i;i++)o[i]&&fe.isFunction(o[i].promise)?o[i].promise().progress(u(i,n,t)).done(u(i,r,o)).fail(l.reject):--s;return s||l.resolveWith(r,o),l.promise()}});var Se;fe.fn.ready=function(e){return fe.ready.promise().done(e),this},fe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?fe.readyWait++:fe.ready(!0)},ready:function(e){(e===!0?--fe.readyWait:fe.isReady)||(fe.isReady=!0,e!==!0&&--fe.readyWait>0||(Se.resolveWith(re,[fe]),fe.fn.triggerHandler&&(fe(re).triggerHandler("ready"),fe(re).off("ready"))))}}),fe.ready.promise=function(t){if(!Se)if(Se=fe.Deferred(),"complete"===re.readyState||"loading"!==re.readyState&&!re.documentElement.doScroll)e.setTimeout(fe.ready);else if(re.addEventListener)re.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s);else{re.attachEvent("onreadystatechange",s),e.attachEvent("onload",s);var n=!1;try{n=null==e.frameElement&&re.documentElement}catch(r){}n&&n.doScroll&&!function i(){if(!fe.isReady){try{n.doScroll("left")}catch(t){return e.setTimeout(i,50)}a(),fe.ready()}}()}return Se.promise(t)},fe.ready.promise();var Me;for(Me in fe(de))break;de.ownFirst="0"===Me,de.inlineBlockNeedsLayout=!1,fe(function(){var e,t,n,r;n=re.getElementsByTagName("body")[0],n&&n.style&&(t=re.createElement("div"),r=re.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),"undefined"!=typeof t.style.zoom&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",de.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(r))}),function(){var e=re.createElement("div");de.deleteExpando=!0;try{delete e.test}catch(t){de.deleteExpando=!1}e=null}();var Ae=function(e){var t=fe.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return 1!==n&&9!==n?!1:!t||t!==!0&&e.getAttribute("classid")===t},Le=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,He=/([A-Z])/g;fe.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?fe.cache[e[fe.expando]]:e[fe.expando],!!e&&!u(e)},data:function(e,t,n){return c(e,t,n)},removeData:function(e,t){return d(e,t)},_data:function(e,t,n){return c(e,t,n,!0)},_removeData:function(e,t){return d(e,t,!0)}}),fe.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=fe.data(o),1===o.nodeType&&!fe._data(o,"parsedAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=fe.camelCase(r.slice(5)),l(o,r,i[r])));fe._data(o,"parsedAttrs",!0)}return i}return"object"==typeof e?this.each(function(){fe.data(this,e)}):arguments.length>1?this.each(function(){fe.data(this,e,t)}):o?l(o,e,fe.data(o,e)):void 0},removeData:function(e){return this.each(function(){fe.removeData(this,e)})}}),fe.extend({queue:function(e,t,n){var r;return e?(t=(t||"fx")+"queue",r=fe._data(e,t),n&&(!r||fe.isArray(n)?r=fe._data(e,t,fe.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),r=n.length,i=n.shift(),o=fe._queueHooks(e,t),a=function(){fe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return fe._data(e,n)||fe._data(e,n,{empty:fe.Callbacks("once memory").add(function(){fe._removeData(e,t+"queue"),fe._removeData(e,n)})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=fe.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=fe._data(o[a],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}}),function(){var e;de.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,r;return n=re.getElementsByTagName("body")[0],n&&n.style?(t=re.createElement("div"),r=re.createElement("div"),r.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(r).appendChild(t),"undefined"!=typeof t.style.zoom&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(re.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(r),e):void 0}}();var qe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Oe=new RegExp("^(?:([+-])=|)("+qe+")([a-z%]*)$","i"),Ie=["Top","Right","Bottom","Left"],Fe=function(e,t){return e=t||e,"none"===fe.css(e,"display")||!fe.contains(e.ownerDocument,e)},Pe=function(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===fe.type(n)){i=!0;for(s in n)Pe(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,fe.isFunction(r)||(a=!0),u&&(a?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(fe(e),n)})),t))for(;l>s;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o},Re=/^(?:checkbox|radio)$/i,Be=/<([\w:-]+)/,$e=/^$|\/(?:java|ecma)script/i,We=/^\s+/,ze="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";!function(){var e=re.createElement("div"),t=re.createDocumentFragment(),n=re.createElement("input");e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",de.leadingWhitespace=3===e.firstChild.nodeType,de.tbody=!e.getElementsByTagName("tbody").length,de.htmlSerialize=!!e.getElementsByTagName("link").length,de.html5Clone="<:nav></:nav>"!==re.createElement("nav").cloneNode(!0).outerHTML,n.type="checkbox",n.checked=!0,t.appendChild(n),de.appendChecked=n.checked,e.innerHTML="<textarea>x</textarea>",de.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,t.appendChild(e),n=re.createElement("input"),n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),de.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,de.noCloneEvent=!!e.addEventListener,e[fe.expando]=1,de.attributes=!e.getAttribute(fe.expando)}();var Xe={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:de.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};Xe.optgroup=Xe.option,Xe.tbody=Xe.tfoot=Xe.colgroup=Xe.caption=Xe.thead,Xe.th=Xe.td;var Ue=/<|&#?\w+;/,Ve=/<tbody/i;!function(){var t,n,r=re.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(de[t]=n in e)||(r.setAttribute(n,"t"),de[t]=r.attributes[n].expando===!1);r=null}();var Ye=/^(?:input|select|textarea)$/i,Ge=/^key/,Je=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^(?:focusinfocus|focusoutblur)$/,Ke=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,r,i){var o,a,s,l,u,c,d,p,f,h,g,m=fe._data(e);if(m){for(n.handler&&(l=n,n=l.handler,i=l.selector),n.guid||(n.guid=fe.guid++),(a=m.events)||(a=m.events={}),(c=m.handle)||(c=m.handle=function(e){return"undefined"==typeof fe||e&&fe.event.triggered===e.type?void 0:fe.event.dispatch.apply(c.elem,arguments)},c.elem=e),t=(t||"").match(Ee)||[""],s=t.length;s--;)o=Ke.exec(t[s])||[],f=g=o[1],h=(o[2]||"").split(".").sort(),f&&(u=fe.event.special[f]||{},f=(i?u.delegateType:u.bindType)||f,u=fe.event.special[f]||{},d=fe.extend({type:f,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&fe.expr.match.needsContext.test(i),namespace:h.join(".")},l),(p=a[f])||(p=a[f]=[],p.delegateCount=0,u.setup&&u.setup.call(e,r,h,c)!==!1||(e.addEventListener?e.addEventListener(f,c,!1):e.attachEvent&&e.attachEvent("on"+f,c))),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,d):p.push(d),fe.event.global[f]=!0);e=null}},remove:function(e,t,n,r,i){var o,a,s,l,u,c,d,p,f,h,g,m=fe.hasData(e)&&fe._data(e);if(m&&(c=m.events)){for(t=(t||"").match(Ee)||[""],u=t.length;u--;)if(s=Ke.exec(t[u])||[],f=g=s[1],h=(s[2]||"").split(".").sort(),f){for(d=fe.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,p=c[f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=p.length;o--;)a=p[o],!i&&g!==a.origType||n&&n.guid!==a.guid||s&&!s.test(a.namespace)||r&&r!==a.selector&&("**"!==r||!a.selector)||(p.splice(o,1),a.selector&&p.delegateCount--,d.remove&&d.remove.call(e,a));l&&!p.length&&(d.teardown&&d.teardown.call(e,h,m.handle)!==!1||fe.removeEvent(e,f,m.handle),delete c[f])}else for(f in c)fe.event.remove(e,f+t[u],n,r,!0);fe.isEmptyObject(c)&&(delete m.handle,fe._removeData(e,"events"))}},trigger:function(t,n,r,i){var o,a,s,l,u,c,d,p=[r||re],f=ce.call(t,"type")?t.type:t,h=ce.call(t,"namespace")?t.namespace.split("."):[];if(s=c=r=r||re,3!==r.nodeType&&8!==r.nodeType&&!Qe.test(f+fe.event.triggered)&&(f.indexOf(".")>-1&&(h=f.split("."),f=h.shift(),h.sort()),a=f.indexOf(":")<0&&"on"+f,t=t[fe.expando]?t:new fe.Event(f,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:fe.makeArray(n,[t]),u=fe.event.special[f]||{},i||!u.trigger||u.trigger.apply(r,n)!==!1)){if(!i&&!u.noBubble&&!fe.isWindow(r)){for(l=u.delegateType||f,Qe.test(l+f)||(s=s.parentNode);s;s=s.parentNode)p.push(s),c=s;c===(r.ownerDocument||re)&&p.push(c.defaultView||c.parentWindow||e)}for(d=0;(s=p[d++])&&!t.isPropagationStopped();)t.type=d>1?l:u.bindType||f,o=(fe._data(s,"events")||{})[t.type]&&fe._data(s,"handle"),o&&o.apply(s,n),o=a&&s[a],o&&o.apply&&Ae(s)&&(t.result=o.apply(s,n),t.result===!1&&t.preventDefault());if(t.type=f,!i&&!t.isDefaultPrevented()&&(!u._default||u._default.apply(p.pop(),n)===!1)&&Ae(r)&&a&&r[f]&&!fe.isWindow(r)){c=r[a],c&&(r[a]=null),fe.event.triggered=f;try{r[f]()}catch(g){}fe.event.triggered=void 0,c&&(r[a]=c)}return t.result}},dispatch:function(e){e=fe.event.fix(e);var t,n,r,i,o,a=[],s=ie.call(arguments),l=(fe._data(this,"events")||{})[e.type]||[],u=fe.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,e)!==!1){for(a=fe.event.handlers.call(this,e,l),t=0;(i=a[t++])&&!e.isPropagationStopped();)for(e.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(o.namespace)||(e.handleObj=o,e.data=o.data,r=((fe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s),void 0!==r&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,a=[],s=t.delegateCount,l=e.target;if(s&&l.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==e.type)){for(r=[],n=0;s>n;n++)o=t[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?fe(i,this).index(l)>-1:fe.find(i,this,null,[l]).length),r[i]&&r.push(o);r.length&&a.push({elem:l,handlers:r})}return s<t.length&&a.push({elem:this,handlers:t.slice(s)}),a},fix:function(e){if(e[fe.expando])return e;var t,n,r,i=e.type,o=e,a=this.fixHooks[i];for(a||(this.fixHooks[i]=a=Je.test(i)?this.mouseHooks:Ge.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new fe.Event(o),t=r.length;t--;)n=r[t],e[n]=o[n];return e.target||(e.target=o.srcElement||re),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,a.filter?a.filter(e,o):e},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,r,i,o=t.button,a=t.fromElement;return null==e.pageX&&null!=t.clientX&&(r=e.target.ownerDocument||re,i=r.documentElement,n=r.body,e.pageX=t.clientX+(i&&i.scrollLeft||n&&n.scrollLeft||0)-(i&&i.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(i&&i.scrollTop||n&&n.scrollTop||0)-(i&&i.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&a&&(e.relatedTarget=a===e.target?t.toElement:a),e.which||void 0===o||(e.which=1&o?1:2&o?3:4&o?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==x()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){return this===x()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return fe.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(e){return fe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n){var r=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(r,null,t),r.isDefaultPrevented()&&n.preventDefault()}},fe.removeEvent=re.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)}:function(e,t,n){var r="on"+t;e.detachEvent&&("undefined"==typeof e[r]&&(e[r]=null),e.detachEvent(r,n))},fe.Event=function(e,t){return this instanceof fe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?v:b):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),void(this[fe.expando]=!0)):new fe.Event(e,t)},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:b,isPropagationStopped:b,isImmediatePropagationStopped:b,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=v,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=v,e&&!this.isSimulated&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=v,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||fe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),de.submit||(fe.event.special.submit={setup:function(){return fe.nodeName(this,"form")?!1:void fe.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=fe.nodeName(t,"input")||fe.nodeName(t,"button")?fe.prop(t,"form"):void 0;n&&!fe._data(n,"submit")&&(fe.event.add(n,"submit._submit",function(e){e._submitBubble=!0}),fe._data(n,"submit",!0))})},postDispatch:function(e){e._submitBubble&&(delete e._submitBubble,this.parentNode&&!e.isTrigger&&fe.event.simulate("submit",this.parentNode,e))},teardown:function(){return fe.nodeName(this,"form")?!1:void fe.event.remove(this,"._submit")}}),de.change||(fe.event.special.change={setup:function(){return Ye.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(fe.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._justChanged=!0)}),fe.event.add(this,"click._change",function(e){this._justChanged&&!e.isTrigger&&(this._justChanged=!1),fe.event.simulate("change",this,e)})),!1):void fe.event.add(this,"beforeactivate._change",function(e){var t=e.target;Ye.test(t.nodeName)&&!fe._data(t,"change")&&(fe.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||fe.event.simulate("change",this.parentNode,e)}),fe._data(t,"change",!0))})},handle:function(e){var t=e.target;return this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type?e.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return fe.event.remove(this,"._change"),!Ye.test(this.nodeName)}}),de.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=fe._data(r,t);i||r.addEventListener(e,n,!0),fe._data(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=fe._data(r,t)-1;i?fe._data(r,t,i):(r.removeEventListener(e,n,!0),fe._removeData(r,t))}}}),fe.fn.extend({on:function(e,t,n,r){return w(this,e,t,n,r)},one:function(e,t,n,r){return w(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,fe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=b),this.each(function(){fe.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?fe.event.trigger(e,t,n,!0):void 0}});var Ze=/ jQuery\d+="(?:null|\d+)"/g,et=new RegExp("<(?:"+ze+")[\\s/>]","i"),tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,nt=/<script|<style|<link/i,rt=/checked\s*(?:[^=]|=\s*.checked.)/i,it=/^true\/(.*)/,ot=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,at=f(re),st=at.appendChild(re.createElement("div"));fe.extend({htmlPrefilter:function(e){return e.replace(tt,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,l=fe.contains(e.ownerDocument,e);if(de.html5Clone||fe.isXMLDoc(e)||!et.test("<"+e.nodeName+">")?o=e.cloneNode(!0):(st.innerHTML=e.outerHTML,st.removeChild(o=st.firstChild)),!(de.noCloneEvent&&de.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(r=h(o),s=h(e),a=0;null!=(i=s[a]);++a)r[a]&&k(i,r[a]);if(t)if(n)for(s=s||h(e),r=r||h(o),a=0;null!=(i=s[a]);a++)T(i,r[a]);else T(e,o);return r=h(o,"script"),r.length>0&&g(r,!l&&h(e,"script")),r=s=i=null,o},cleanData:function(e,t){for(var n,r,i,o,a=0,s=fe.expando,l=fe.cache,u=de.attributes,c=fe.event.special;null!=(n=e[a]);a++)if((t||Ae(n))&&(i=n[s],o=i&&l[i])){if(o.events)for(r in o.events)c[r]?fe.event.remove(n,r):fe.removeEvent(n,r,o.handle);l[i]&&(delete l[i],u||"undefined"==typeof n.removeAttribute?n[s]=void 0:n.removeAttribute(s),ne.push(i))}}}),fe.fn.extend({domManip:D,detach:function(e){return N(this,e,!0)},remove:function(e){return N(this,e)},text:function(e){return Pe(this,function(e){return void 0===e?fe.text(this):this.empty().append((this[0]&&this[0].ownerDocument||re).createTextNode(e))},null,e,arguments.length)},append:function(){return D(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=j(this,e);t.appendChild(e)}})},prepend:function(){return D(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=j(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return D(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return D(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&fe.cleanData(h(e,!1));e.firstChild;)e.removeChild(e.firstChild);
e.options&&fe.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return Pe(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(Ze,""):void 0;if("string"==typeof e&&!nt.test(e)&&(de.htmlSerialize||!et.test(e))&&(de.leadingWhitespace||!We.test(e))&&!Xe[(Be.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(fe.cleanData(h(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return D(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(h(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,r=0,i=[],o=fe(e),a=o.length-1;a>=r;r++)n=r===a?this:this.clone(!0),fe(o[r])[t](n),ae.apply(i,n.get());return this.pushStack(i)}});var lt,ut={HTML:"block",BODY:"block"},ct=/^margin/,dt=new RegExp("^("+qe+")(?!px)[a-z%]+$","i"),pt=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i},ft=re.documentElement;!function(){function t(){var t,c,d=re.documentElement;d.appendChild(l),u.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",n=i=s=!1,r=a=!0,e.getComputedStyle&&(c=e.getComputedStyle(u),n="1%"!==(c||{}).top,s="2px"===(c||{}).marginLeft,i="4px"===(c||{width:"4px"}).width,u.style.marginRight="50%",r="4px"===(c||{marginRight:"4px"}).marginRight,t=u.appendChild(re.createElement("div")),t.style.cssText=u.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",u.style.width="1px",a=!parseFloat((e.getComputedStyle(t)||{}).marginRight),u.removeChild(t)),u.style.display="none",o=0===u.getClientRects().length,o&&(u.style.display="",u.innerHTML="<table><tr><td></td><td>t</td></tr></table>",u.childNodes[0].style.borderCollapse="separate",t=u.getElementsByTagName("td"),t[0].style.cssText="margin:0;border:0;padding:0;display:none",o=0===t[0].offsetHeight,o&&(t[0].style.display="",t[1].style.display="none",o=0===t[0].offsetHeight)),d.removeChild(l)}var n,r,i,o,a,s,l=re.createElement("div"),u=re.createElement("div");u.style&&(u.style.cssText="float:left;opacity:.5",de.opacity="0.5"===u.style.opacity,de.cssFloat=!!u.style.cssFloat,u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",de.clearCloneStyle="content-box"===u.style.backgroundClip,l=re.createElement("div"),l.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",u.innerHTML="",l.appendChild(u),de.boxSizing=""===u.style.boxSizing||""===u.style.MozBoxSizing||""===u.style.WebkitBoxSizing,fe.extend(de,{reliableHiddenOffsets:function(){return null==n&&t(),o},boxSizingReliable:function(){return null==n&&t(),i},pixelMarginRight:function(){return null==n&&t(),r},pixelPosition:function(){return null==n&&t(),n},reliableMarginRight:function(){return null==n&&t(),a},reliableMarginLeft:function(){return null==n&&t(),s}}))}();var ht,gt,mt=/^(top|right|bottom|left)$/;e.getComputedStyle?(ht=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},gt=function(e,t,n){var r,i,o,a,s=e.style;return n=n||ht(e),a=n?n.getPropertyValue(t)||n[t]:void 0,""!==a&&void 0!==a||fe.contains(e.ownerDocument,e)||(a=fe.style(e,t)),n&&!de.pixelMarginRight()&&dt.test(a)&&ct.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o),void 0===a?a:a+""}):ft.currentStyle&&(ht=function(e){return e.currentStyle},gt=function(e,t,n){var r,i,o,a,s=e.style;return n=n||ht(e),a=n?n[t]:void 0,null==a&&s&&s[t]&&(a=s[t]),dt.test(a)&&!mt.test(t)&&(r=s.left,i=e.runtimeStyle,o=i&&i.left,o&&(i.left=e.currentStyle.left),s.left="fontSize"===t?"1em":a,a=s.pixelLeft+"px",s.left=r,o&&(i.left=o)),void 0===a?a:a+""||"auto"});var yt=/alpha\([^)]*\)/i,vt=/opacity\s*=\s*([^)]*)/i,bt=/^(none|table(?!-c[ea]).+)/,xt=new RegExp("^("+qe+")(.*)$","i"),wt={position:"absolute",visibility:"hidden",display:"block"},jt={letterSpacing:"0",fontWeight:"400"},_t=["Webkit","O","Moz","ms"],Ct=re.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=gt(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":de.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=fe.camelCase(t),l=e.style;if(t=fe.cssProps[s]||(fe.cssProps[s]=A(s)||s),a=fe.cssHooks[t]||fe.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];if(o=typeof n,"string"===o&&(i=Oe.exec(n))&&i[1]&&(n=p(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(fe.cssNumber[s]?"":"px")),de.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),!(a&&"set"in a&&void 0===(n=a.set(e,n,r)))))try{l[t]=n}catch(u){}}},css:function(e,t,n,r){var i,o,a,s=fe.camelCase(t);return t=fe.cssProps[s]||(fe.cssProps[s]=A(s)||s),a=fe.cssHooks[t]||fe.cssHooks[s],a&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=gt(e,t,r)),"normal"===o&&t in jt&&(o=jt[t]),""===n||n?(i=parseFloat(o),n===!0||isFinite(i)?i||0:o):o}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,r){return n?bt.test(fe.css(e,"display"))&&0===e.offsetWidth?pt(e,wt,function(){return O(e,t,r)}):O(e,t,r):void 0},set:function(e,n,r){var i=r&&ht(e);return H(e,n,r?q(e,t,r,de.boxSizing&&"border-box"===fe.css(e,"boxSizing",!1,i),i):0)}}}),de.opacity||(fe.cssHooks.opacity={get:function(e,t){return vt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,r=e.currentStyle,i=fe.isNumeric(t)?"alpha(opacity="+100*t+")":"",o=r&&r.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===fe.trim(o.replace(yt,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||r&&!r.filter)||(n.filter=yt.test(o)?o.replace(yt,i):o+" "+i)}}),fe.cssHooks.marginRight=M(de.reliableMarginRight,function(e,t){return t?pt(e,{display:"inline-block"},gt,[e,"marginRight"]):void 0}),fe.cssHooks.marginLeft=M(de.reliableMarginLeft,function(e,t){return t?(parseFloat(gt(e,"marginLeft"))||(fe.contains(e.ownerDocument,e)?e.getBoundingClientRect().left-pt(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}):0))+"px":void 0}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[e+Ie[r]+t]=o[r]||o[r-2]||o[0];return i}},ct.test(e)||(fe.cssHooks[e+t].set=H)}),fe.fn.extend({css:function(e,t){return Pe(this,function(e,t,n){var r,i,o={},a=0;if(fe.isArray(t)){for(r=ht(e),i=t.length;i>a;a++)o[t[a]]=fe.css(e,t[a],!1,r);return o}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)},show:function(){return L(this,!0)},hide:function(){return L(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Fe(this)?fe(this).show():fe(this).hide()})}}),fe.Tween=I,I.prototype={constructor:I,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(fe.cssNumber[n]?"":"px")},cur:function(){var e=I.propHooks[this.prop];return e&&e.get?e.get(this):I.propHooks._default.get(this)},run:function(e){var t,n=I.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):I.propHooks._default.set(this),this}},I.prototype.init.prototype=I.prototype,I.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},I.propHooks.scrollTop=I.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=I.prototype.init,fe.fx.step={};var Tt,kt,Dt=/^(?:toggle|show|hide)$/,Nt=/queueHooks$/;fe.Animation=fe.extend(W,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return p(n.elem,e,Oe.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(Ee);for(var n,r=0,i=e.length;i>r;r++)n=e[r],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(t)},prefilters:[B],prefilter:function(e,t){t?W.prefilters.unshift(e):W.prefilters.push(e)}}),fe.speed=function(e,t,n){var r=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return r.duration=fe.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in fe.fx.speeds?fe.fx.speeds[r.duration]:fe.fx.speeds._default,null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){fe.isFunction(r.old)&&r.old.call(this),r.queue&&fe.dequeue(this,r.queue)},r},fe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Fe).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=fe.isEmptyObject(e),o=fe.speed(t,n,r),a=function(){var t=W(this,fe.extend({},e),o);(i||fe._data(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=fe.timers,a=fe._data(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&Nt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=fe._data(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=fe.timers,a=r?r.length:0;for(n.finish=!0,fe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;a>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(P(t,!0),e,r,i)}}),fe.each({slideDown:P("show"),slideUp:P("hide"),slideToggle:P("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),fe.timers=[],fe.fx.tick=function(){var e,t=fe.timers,n=0;for(Tt=fe.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||fe.fx.stop(),Tt=void 0},fe.fx.timer=function(e){fe.timers.push(e),e()?fe.fx.start():fe.timers.pop()},fe.fx.interval=13,fe.fx.start=function(){kt||(kt=e.setInterval(fe.fx.tick,fe.fx.interval))},fe.fx.stop=function(){e.clearInterval(kt),kt=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e,t=re.createElement("input"),n=re.createElement("div"),r=re.createElement("select"),i=r.appendChild(re.createElement("option"));n=re.createElement("div"),n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",e=n.getElementsByTagName("a")[0],t.setAttribute("type","checkbox"),n.appendChild(t),e=n.getElementsByTagName("a")[0],e.style.cssText="top:1px",de.getSetAttribute="t"!==n.className,de.style=/top/.test(e.getAttribute("style")),de.hrefNormalized="/a"===e.getAttribute("href"),de.checkOn=!!t.value,de.optSelected=i.selected,de.enctype=!!re.createElement("form").enctype,r.disabled=!0,de.optDisabled=!i.disabled,t=re.createElement("input"),t.setAttribute("value",""),de.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),de.radioValue="t"===t.value}();var Et=/\r/g,St=/[\x20\t\r\n\f]+/g;fe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=fe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,fe(this).val()):e,null==i?i="":"number"==typeof i?i+="":fe.isArray(i)&&(i=fe.map(i,function(e){return null==e?"":e+""})),t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=fe.valHooks[i.type]||fe.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(Et,""):null==n?"":n)}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:fe.trim(fe.text(e)).replace(St," ")}},select:{get:function(e){for(var t,n,r=e.options,i=e.selectedIndex,o="select-one"===e.type||0>i,a=o?null:[],s=o?i+1:r.length,l=0>i?s:o?i:0;s>l;l++)if(n=r[l],(n.selected||l===i)&&(de.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!fe.nodeName(n.parentNode,"optgroup"))){if(t=fe(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=fe.makeArray(t),a=i.length;a--;)if(r=i[a],fe.inArray(fe.valHooks.option.get(r),o)>-1)try{r.selected=n=!0}catch(s){r.scrollHeight}else r.selected=!1;return n||(e.selectedIndex=-1),i}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){return fe.isArray(t)?e.checked=fe.inArray(fe(e).val(),t)>-1:void 0}},de.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Mt,At,Lt=fe.expr.attrHandle,Ht=/^(?:checked|selected)$/i,qt=de.getSetAttribute,Ot=de.input;fe.fn.extend({attr:function(e,t){return Pe(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?fe.prop(e,t,n):(1===o&&fe.isXMLDoc(e)||(t=t.toLowerCase(),i=fe.attrHooks[t]||(fe.expr.match.bool.test(t)?At:Mt)),void 0!==n?null===n?void fe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=fe.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!de.radioValue&&"radio"===t&&fe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(Ee);if(o&&1===e.nodeType)for(;n=o[i++];)r=fe.propFix[n]||n,fe.expr.match.bool.test(n)?Ot&&qt||!Ht.test(n)?e[r]=!1:e[fe.camelCase("default-"+n)]=e[r]=!1:fe.attr(e,n,""),e.removeAttribute(qt?n:r)}}),At={set:function(e,t,n){return t===!1?fe.removeAttr(e,n):Ot&&qt||!Ht.test(n)?e.setAttribute(!qt&&fe.propFix[n]||n,n):e[fe.camelCase("default-"+n)]=e[n]=!0,n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=Lt[t]||fe.find.attr;Ot&&qt||!Ht.test(t)?Lt[t]=function(e,t,r){var i,o;return r||(o=Lt[t],Lt[t]=i,i=null!=n(e,t,r)?t.toLowerCase():null,Lt[t]=o),i}:Lt[t]=function(e,t,n){return n?void 0:e[fe.camelCase("default-"+t)]?t.toLowerCase():null}}),Ot&&qt||(fe.attrHooks.value={set:function(e,t,n){return fe.nodeName(e,"input")?void(e.defaultValue=t):Mt&&Mt.set(e,t,n)}}),qt||(Mt={set:function(e,t,n){var r=e.getAttributeNode(n);return r||e.setAttributeNode(r=e.ownerDocument.createAttribute(n)),r.value=t+="","value"===n||t===e.getAttribute(n)?t:void 0}},Lt.id=Lt.name=Lt.coords=function(e,t,n){var r;return n?void 0:(r=e.getAttributeNode(t))&&""!==r.value?r.value:null},fe.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);return n&&n.specified?n.value:void 0},set:Mt.set},fe.attrHooks.contenteditable={set:function(e,t,n){Mt.set(e,""===t?!1:t,n)}},fe.each(["width","height"],function(e,t){fe.attrHooks[t]={set:function(e,n){return""===n?(e.setAttribute(t,"auto"),n):void 0}}})),de.style||(fe.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var It=/^(?:input|select|textarea|button|object)$/i,Ft=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return Pe(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return e=fe.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(t){}})}}),fe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,i=fe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):It.test(e.nodeName)||Ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),de.hrefNormalized||fe.each(["href","src"],function(e,t){fe.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),de.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),de.enctype||(fe.propFix.enctype="encoding");var Pt=/[\t\r\n\f]/g;fe.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,z(this)))});if("string"==typeof e&&e)for(t=e.match(Ee)||[];n=this[l++];)if(i=z(n),r=1===n.nodeType&&(" "+i+" ").replace(Pt," ")){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=fe.trim(r),i!==s&&fe.attr(n,"class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,l=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ee)||[];n=this[l++];)if(i=z(n),r=1===n.nodeType&&(" "+i+" ").replace(Pt," ")){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=fe.trim(r),i!==s&&fe.attr(n,"class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,z(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=fe(this),o=e.match(Ee)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=z(this),t&&fe._data(this,"__className__",t),fe.attr(this,"class",t||e===!1?"":fe._data(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+z(n)+" ").replace(Pt," ").indexOf(t)>-1)return!0;return!1}}),fe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});var Rt=e.location,Bt=fe.now(),$t=/\?/,Wt=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;fe.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,r=null,i=fe.trim(t+"");return i&&!fe.trim(i.replace(Wt,function(e,t,i,o){return n&&t&&(r=0),0===r?e:(n=i||t,r+=!o-!i,"")}))?Function("return "+i)():fe.error("Invalid JSON: "+t)},fe.parseXML=function(t){var n,r;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(r=new e.DOMParser,n=r.parseFromString(t,"text/xml")):(n=new e.ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(i){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var zt=/#.*$/,Xt=/([?&])_=[^&]*/,Ut=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Vt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Yt=/^(?:GET|HEAD)$/,Gt=/^\/\//,Jt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Qt={},Kt={},Zt="*/".concat("*"),en=Rt.href,tn=Jt.exec(en.toLowerCase())||[];fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:en,type:"GET",isLocal:Vt.test(tn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":fe.parseJSON,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?V(V(e,fe.ajaxSettings),t):V(fe.ajaxSettings,e)},ajaxPrefilter:X(Qt),ajaxTransport:X(Kt),ajax:function(t,n){function r(t,n,r,i){var o,d,v,b,w,_=n;2!==x&&(x=2,l&&e.clearTimeout(l),c=void 0,s=i||"",j.readyState=t>0?4:0,o=t>=200&&300>t||304===t,r&&(b=Y(p,j,r)),b=G(p,b,j,o),o?(p.ifModified&&(w=j.getResponseHeader("Last-Modified"),w&&(fe.lastModified[a]=w),w=j.getResponseHeader("etag"),w&&(fe.etag[a]=w)),204===t||"HEAD"===p.type?_="nocontent":304===t?_="notmodified":(_=b.state,d=b.data,v=b.error,o=!v)):(v=_,!t&&_||(_="error",0>t&&(t=0))),j.status=t,j.statusText=(n||_)+"",o?g.resolveWith(f,[d,_,j]):g.rejectWith(f,[j,_,v]),j.statusCode(y),y=void 0,u&&h.trigger(o?"ajaxSuccess":"ajaxError",[j,p,o?d:v]),m.fireWith(f,[j,_]),u&&(h.trigger("ajaxComplete",[j,p]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,l,u,c,d,p=fe.ajaxSetup({},n),f=p.context||p,h=p.context&&(f.nodeType||f.jquery)?fe(f):fe.event,g=fe.Deferred(),m=fe.Callbacks("once memory"),y=p.statusCode||{},v={},b={},x=0,w="canceled",j={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!d)for(d={};t=Ut.exec(s);)d[t[1].toLowerCase()]=t[2];t=d[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=b[n]=b[n]||e,v[e]=t),this},overrideMimeType:function(e){return x||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>x)for(t in e)y[t]=[y[t],e[t]];else j.always(e[j.status]);return this},abort:function(e){var t=e||w;return c&&c.abort(t),r(0,t),this}};if(g.promise(j).complete=m.add,j.success=j.done,j.error=j.fail,p.url=((t||p.url||en)+"").replace(zt,"").replace(Gt,tn[1]+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=fe.trim(p.dataType||"*").toLowerCase().match(Ee)||[""],null==p.crossDomain&&(i=Jt.exec(p.url.toLowerCase()),p.crossDomain=!(!i||i[1]===tn[1]&&i[2]===tn[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(tn[3]||("http:"===tn[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=fe.param(p.data,p.traditional)),U(Qt,p,n,j),2===x)return j;u=fe.event&&p.global,u&&0===fe.active++&&fe.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Yt.test(p.type),a=p.url,p.hasContent||(p.data&&(a=p.url+=($t.test(a)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=Xt.test(a)?a.replace(Xt,"$1_="+Bt++):a+($t.test(a)?"&":"?")+"_="+Bt++)),p.ifModified&&(fe.lastModified[a]&&j.setRequestHeader("If-Modified-Since",fe.lastModified[a]),fe.etag[a]&&j.setRequestHeader("If-None-Match",fe.etag[a])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&j.setRequestHeader("Content-Type",p.contentType),j.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Zt+"; q=0.01":""):p.accepts["*"]);for(o in p.headers)j.setRequestHeader(o,p.headers[o]);if(p.beforeSend&&(p.beforeSend.call(f,j,p)===!1||2===x))return j.abort();w="abort";for(o in{success:1,error:1,complete:1})j[o](p[o]);if(c=U(Kt,p,n,j)){if(j.readyState=1,u&&h.trigger("ajaxSend",[j,p]),2===x)return j;p.async&&p.timeout>0&&(l=e.setTimeout(function(){j.abort("timeout")},p.timeout));try{x=1,c.send(v,r)}catch(_){if(!(2>x))throw _;r(-1,_)}}else r(-1,"No Transport");return j},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,r,i){return fe.isFunction(n)&&(i=i||r,r=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:i,data:n,success:r},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},fe.fn.extend({wrapAll:function(e){if(fe.isFunction(e))return this.each(function(t){fe(this).wrapAll(e.call(this,t))});if(this[0]){var t=fe(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){fe.nodeName(this,"body")||fe(this).replaceWith(this.childNodes)}).end()}}),fe.expr.filters.hidden=function(e){return de.reliableHiddenOffsets()?e.offsetWidth<=0&&e.offsetHeight<=0&&!e.getClientRects().length:Q(e)},fe.expr.filters.visible=function(e){return!fe.expr.filters.hidden(e)};var nn=/%20/g,rn=/\[\]$/,on=/\r?\n/g,an=/^(?:submit|button|image|reset|file)$/i,sn=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,r=[],i=function(e,t){t=fe.isFunction(t)?t():null==t?"":t,r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=fe.ajaxSettings&&fe.ajaxSettings.traditional),fe.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){i(this.name,this.value)});else for(n in e)K(n,e[n],t,i);return r.join("&").replace(nn,"+")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&sn.test(this.nodeName)&&!an.test(e)&&(this.checked||!Re.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:fe.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(on,"\r\n")}}):{name:t.name,value:n.replace(on,"\r\n")}}).get()}}),fe.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return this.isLocal?ee():re.documentMode>8?Z():/^(get|post|head|put|delete|options)$/i.test(this.type)&&Z()||ee()}:Z;var ln=0,un={},cn=fe.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in un)un[e](void 0,!0)}),de.cors=!!cn&&"withCredentials"in cn,cn=de.ajax=!!cn,cn&&fe.ajaxTransport(function(t){if(!t.crossDomain||de.cors){var n;return{send:function(r,i){var o,a=t.xhr(),s=++ln;if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(o in t.xhrFields)a[o]=t.xhrFields[o];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(o in r)void 0!==r[o]&&a.setRequestHeader(o,r[o]+"");a.send(t.hasContent&&t.data||null),n=function(e,r){var o,l,u;if(n&&(r||4===a.readyState))if(delete un[s],n=void 0,a.onreadystatechange=fe.noop,r)4!==a.readyState&&a.abort();else{u={},o=a.status,"string"==typeof a.responseText&&(u.text=a.responseText);try{l=a.statusText}catch(c){l=""}o||!t.isLocal||t.crossDomain?1223===o&&(o=204):o=u.text?200:404}u&&i(o,l,u,a.getAllResponseHeaders())},t.async?4===a.readyState?e.setTimeout(n):a.onreadystatechange=un[s]=n:n()},abort:function(){n&&n(void 0,!0)}}}}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=re.head||fe("head")[0]||re.documentElement;return{send:function(r,i){t=re.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||i(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var dn=[],pn=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=dn.pop()||fe.expando+"_"+Bt++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=t.jsonp!==!1&&(pn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&pn.test(t.data)&&"data");return s||"jsonp"===t.dataTypes[0]?(i=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(pn,"$1"+i):t.jsonp!==!1&&(t.url+=($t.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||fe.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?fe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,dn.push(i)),a&&fe.isFunction(o)&&o(a[0]),a=o=void 0}),"script"):void 0}),fe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||re;var r=je.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=y([e],t,i),i&&i.length&&fe(i).remove(),fe.merge([],r.childNodes))};var fn=fe.fn.load;fe.fn.load=function(e,t,n){if("string"!=typeof e&&fn)return fn.apply(this,arguments);var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=fe.trim(e.slice(s,e.length)),e=e.slice(0,s)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&fe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?fe("<div>").append(fe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.filters.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u,c=fe.css(e,"position"),d=fe(e),p={};"static"===c&&(e.style.position="relative"),s=d.offset(),o=fe.css(e,"top"),l=fe.css(e,"left"),u=("absolute"===c||"fixed"===c)&&fe.inArray("auto",[o,l])>-1,u?(r=d.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):d.css(p);
}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,r={top:0,left:0},i=this[0],o=i&&i.ownerDocument;if(o)return t=o.documentElement,fe.contains(t,i)?("undefined"!=typeof i.getBoundingClientRect&&(r=i.getBoundingClientRect()),n=te(o),{top:r.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:r.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):r},position:function(){if(this[0]){var e,t,n={top:0,left:0},r=this[0];return"fixed"===fe.css(r,"position")?t=r.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),fe.nodeName(e[0],"html")||(n=e.offset()),n.top+=fe.css(e[0],"borderTopWidth",!0),n.left+=fe.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-fe.css(r,"marginTop",!0),left:t.left-n.left-fe.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&!fe.nodeName(e,"html")&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||ft})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);fe.fn[e]=function(r){return Pe(this,function(e,r,i){var o=te(e);return void 0===i?o?t in o?o[t]:o.document.documentElement[r]:e[r]:void(o?o.scrollTo(n?fe(o).scrollLeft():i,n?i:fe(o).scrollTop()):e[r]=i)},e,r,arguments.length,null)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=M(de.pixelPosition,function(e,n){return n?(n=gt(e,t),dt.test(n)?fe(e).position()[t]+"px":n):void 0})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){fe.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||i===!0?"margin":"border");return Pe(this,function(t,n,r){var i;return fe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===r?fe.css(t,n,a):fe.style(t,n,r,a)},t,o?r:void 0,o,null)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.fn.size=function(){return this.length},fe.fn.andSelf=fe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var hn=e.jQuery,gn=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=gn),t&&e.jQuery===fe&&(e.jQuery=hn),fe},t||(e.jQuery=e.$=fe),fe}),setInterval(getDate,0),$(function(e){function t(){var t=e(this).scrollTop(),n=e(".header").height();t>=n?(e(".container").addClass("scrolled"),e(".scrolled").width(e(".wrapper").width())):(e(".container").removeClass("scrolled"),e(".container").width(e(".wrapper").width()))}function n(){var t=e(window).width();t>1032?e(".news__box:lt(2)").addClass("news__box-big"):e(".news__box:lt(2)").removeClass("news__box-big")}e(window).on("load scroll resize",t),e(document).on("click",".trigger-history",function(t){t.preventDefault(),e("#history-modal").iziModal("open")}),e("#history-modal").iziModal({title:"Вітаємо на сторінці історії",subtitle:"Тут зібрана інформація про історію нашого села",icon:"icon-chat",iconColor:"white",fullscreen:!0,width:1120,padding:5,timeout:777777,timeoutProgressbar:!0,transitionIn:"fadeInDown",transitionOut:"bounceOutDown",pauseOnHover:!0}),e(document).on({mouseenter:function(){e(this).find(".item-info").fadeOut(200).find(".line").css("width","0%")},mouseleave:function(){e(this).find(".item-info").fadeIn(700).find(".line").css("width","40%")}},".gallery-wrap"),e(document).on("mouseenter",".gallery-wrap",function(){e(".gallery-wrap > div").each(function(){allId=e(this).attr("id")}).lightGallery({thumbnail:!0,showThumbByDefault:!1})}),e(document).on("click",".trigger-gallery",function(t){t.preventDefault(),e("#gallery-modal").iziModal("open")}),e("#gallery-modal").iziModal({title:"Вітаємо в галереї зображень",subtitle:"Тут зібрані яскраві моменти життя села Демидів",icon:"icon-chat",iconColor:"white",fullscreen:!0,width:960,padding:25,timeout:777777,timeoutProgressbar:!0,transitionIn:"fadeInDown",transitionOut:"bounceOutDown",pauseOnHover:!0}),e(window).on("load resize",n),e(".news__desc > .trigger-large").on("click",function(t){t.preventDefault(),e(this).parent(".news__desc").next(".iziModal").iziModal("open")}),e(".iziModal.normal").iziModal({title:"Новини Демидова",subtitle:"найсвіжіші події з життя громади",icon:"icon-chat",iconColor:"white",fullscreen:!0,transitionOut:"bounceOutDown",timeout:3e4,timeoutProgressbar:!0,pauseOnHover:!0,timeoutProgressbarColor:"rgba(255,255,255,0.5)",width:768,padding:25}),e(".iziModal.attention").iziModal({title:"Новини Демидова",subtitle:"найсвіжіші події з життя громади",icon:"icon-chat",iconColor:"white",headerColor:"#e25151",fullscreen:!0,transitionOut:"bounceOutDown",timeout:3e4,timeoutProgressbar:!0,pauseOnHover:!0,timeoutProgressbarColor:"rgba(255,255,255,0.5)",width:768,padding:25})}),$(document).ready(function(){$(".resize").width($(".wrapper").width()+1),$(".header").height($(".header").width()/3.413333333333333),$(window).resize(function(){$(".resize").width($(".wrapper").width()),$(".header").height($(".header").width()/3.413333333333333)})}),function(e){"use strict";function t(e){return new RegExp("(^|\\s+)"+e+"(\\s+|$)")}function n(e,t){var n=r(e,t)?o:i;n(e,t)}var r,i,o;"classList"in document.documentElement?(r=function(e,t){return e.classList.contains(t)},i=function(e,t){e.classList.add(t)},o=function(e,t){e.classList.remove(t)}):(r=function(e,n){return t(n).test(e.className)},i=function(e,t){r(e,t)||(e.className=e.className+" "+t)},o=function(e,n){e.className=e.className.replace(t(n)," ")}),e.classie={hasClass:r,addClass:i,removeClass:o,toggleClass:n,has:r,add:i,remove:o,toggle:n}}(window),$(function(e){var t=e(".menu__link");t.on("click",function(t){e(this).addClass("active").parent().siblings().find(".active").removeClass("active")});var n=e(".menu__link:not(.myClass)");n.on("click",function(e){e.preventDefault()})});var json={blocks:[{headline:"Чисте довкілля",imgDate:"Серпень 08, 2015",id:"animated-thumbnials_1",dataCount:"16",links:[{href:"img/clean_environment/1-lightbox.jpg",src:"img/clean_environment/1.jpg",alt:""},{href:"img/clean_environment/2-lightbox.jpg",src:"img/clean_environment/2.jpg",alt:""},{href:"img/clean_environment/3-lightbox.jpg",src:"img/clean_environment/3.jpg",alt:""},{href:"img/clean_environment/4-lightbox.jpg",src:"img/clean_environment/4.jpg",alt:""},{href:"img/clean_environment/5-lightbox.jpg",src:"img/clean_environment/5.jpg",alt:""},{href:"img/clean_environment/6-lightbox.jpg",src:"img/clean_environment/6.jpg",alt:""},{href:"img/clean_environment/7-lightbox.jpg",src:"img/clean_environment/7.jpg",alt:""},{href:"img/clean_environment/8-lightbox.jpg",src:"img/clean_environment/8.jpg",alt:""},{href:"img/clean_environment/9-lightbox.jpg",src:"img/clean_environment/9.jpg",alt:""},{href:"img/clean_environment/10-lightbox.jpg",src:"img/clean_environment/10.jpg",alt:""},{href:"img/clean_environment/11-lightbox.jpg",src:"img/clean_environment/11.jpg",alt:""},{href:"img/clean_environment/12-lightbox.jpg",src:"img/clean_environment/12.jpg",alt:""},{href:"img/clean_environment/13-lightbox.jpg",src:"img/clean_environment/13.jpg",alt:""},{href:"img/clean_environment/14-lightbox.jpg",src:"img/clean_environment/14.jpg",alt:""},{href:"img/clean_environment/15-lightbox.jpg",src:"img/clean_environment/15.jpg",alt:""},{href:"img/clean_environment/16-lightbox.jpg",src:"img/clean_environment/16.jpg",alt:""}]},{headline:"Спортивні змагання",imgDate:"Серпень 06, 2015",id:"animated-thumbnials_2",dataCount:"7",links:[{href:"img/sport/1.jpg",src:"img/sport/1_tb.jpg",alt:"На старт, увага , Руш!"},{href:"img/sport/2.jpg",src:"img/sport/2_tb.jpg",alt:"Так, я на коні"},{href:"img/sport/3.jpg",src:"img/sport/3_tb.jpg",alt:"Хоп хей ла-ла-лей, три девченки , семь пеарней"},{href:"img/sport/4.jpg",src:"img/sport/4_tb.jpg",alt:"Пара навей..."},{href:"img/sport/5.jpg",src:"img/sport/5_tb.jpg",alt:"Конем ходи..."},{href:"img/sport/6.jpg",src:"img/sport/6_tb.jpg",alt:"Тихше їдеш - далі будеш"},{href:"img/sport/7.jpg",src:"img/sport/7_tb.jpg",alt:"Св'яткові нагороди"}]},{headline:"День св`ятого Миколая",imgDate:"Грудень 19, 2015",id:"animated-thumbnials_3",dataCount:"5",links:[{href:"img/Nicholas_day/1.jpg",src:"img/Nicholas_day/1_tb.jpg",alt:"Nikolas"},{href:"img/Nicholas_day/2.jpg",src:"img/Nicholas_day/2_tb.jpg",alt:"croud"},{href:"img/Nicholas_day/3.jpg",src:"img/Nicholas_day/3_tb.jpg",alt:"Nikolas and girl"},{href:"img/Nicholas_day/4.jpg",src:"img/Nicholas_day/4_tb.jpg",alt:"Nikolas in park"},{href:"img/Nicholas_day/5.jpg",src:"img/Nicholas_day/5_tb.jpg",alt:"Nikolas horse"}]},{headline:"День пам`яті загиблих АТОвців",imgDate:"Жовтень 01, 2016",id:"animated-thumbnials_5",dataCount:"34",links:[{href:"img/Memory_Day/1.jpg",src:"img/Memory_Day/1_tb.jpg",alt:"Серце України"},{href:"img/Memory_Day/2.jpg",src:"img/Memory_Day/2_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/3.jpg",src:"img/Memory_Day/3_tb.jpg",alt:"Єдина Україна"},{href:"img/Memory_Day/4.jpg",src:"img/Memory_Day/4_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/5.jpg",src:"img/Memory_Day/5_tb.jpg",alt:"Моє серце в ритмі з Украіною!"},{href:"img/Memory_Day/6.jpg",src:"img/Memory_Day/6_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/7.jpg",src:"img/Memory_Day/7_tb.jpg",alt:"Серце України"},{href:"img/Memory_Day/8.jpg",src:"img/Memory_Day/8_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/9.jpg",src:"img/Memory_Day/9_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/10.jpg",src:"img/Memory_Day/10_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/11.jpg",src:"img/Memory_Day/11_tb.jpg",alt:"ПТН ПХН"},{href:"img/Memory_Day/12.jpg",src:"img/Memory_Day/12_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/13.jpg",src:"img/Memory_Day/13_tb.jpg",alt:"Ато це наші хлопці!"},{href:"img/Memory_Day/14.jpg",src:"img/Memory_Day/14_tb.jpg",alt:"Ато це наші хлопці!"},{href:"img/Memory_Day/15.jpg",src:"img/Memory_Day/15_tb.jpg",alt:"Ато це наші хлопці!"},{href:"img/Memory_Day/16.jpg",src:"img/Memory_Day/16_tb.jpg",alt:"З Україною в Серці"},{href:"img/Memory_Day/17.jpg",src:"img/Memory_Day/17_tb.jpg",alt:"З Україною в Серці"},{href:"img/Memory_Day/18.jpg",src:"img/Memory_Day/18_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/19.jpg",src:"img/Memory_Day/19_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/20.jpg",src:"img/Memory_Day/20_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/21.jpg",src:"img/Memory_Day/21_tb.jpg",alt:"Моє серце в ритмі з Украіною!"},{href:"img/Memory_Day/22.jpg",src:"img/Memory_Day/22_tb.jpg",alt:"Юні творці та їх творіння"},{href:"img/Memory_Day/23.jpg",src:"img/Memory_Day/23_tb.jpg",alt:""},{href:"img/Memory_Day/24.jpg",src:"img/Memory_Day/24_tb.jpg",alt:""},{href:"img/Memory_Day/25.jpg",src:"img/Memory_Day/25_tb.jpg",alt:""},{href:"img/Memory_Day/26.jpg",src:"img/Memory_Day/26_tb.jpg",alt:""},{href:"img/Memory_Day/27.jpg",src:"img/Memory_Day/27_tb.jpg",alt:"Св`яткова каша..."},{href:"img/Memory_Day/28.jpg",src:"img/Memory_Day/28_tb.jpg",alt:"Посьміхаємось й махаєм..."},{href:"img/Memory_Day/29.jpg",src:"img/Memory_Day/29_tb.jpg",alt:""},{href:"img/Memory_Day/30.jpg",src:"img/Memory_Day/30_tb.jpg",alt:""},{href:"img/Memory_Day/31.jpg",src:"img/Memory_Day/31_tb.jpg",alt:"Щасливі переможці !"},{href:"img/Memory_Day/32.jpg",src:"img/Memory_Day/32_tb.jpg",alt:"Щасливі переможці !"},{href:"img/Memory_Day/33.jpg",src:"img/Memory_Day/33_tb.jpg",alt:"Щасливі переможці !"},{href:"img/Memory_Day/34.jpg",src:"img/Memory_Day/34_tb.jpg",alt:"Щасливі переможці !"}]}]},templateInfo=document.getElementById("gallery-template").innerHTML,template=Handlebars.compile(templateInfo),templateData=template(json);document.getElementById("content").innerHTML+=templateData;var jsonNews={section:[{newsImgdate:[{img:"img/news_img/newspaper.jpg",month:"Лип.",day:"14"}],newsArticle:[{img:"img/news_img/newspaper.jpg",imgClass:"",title:"Про встановлення місцевих податків та зборів",author:"Cільська рада",link:"https://www.facebook.com/krabtolua?fref=nf",alert:"normal",paragraph1:"Демидівська сільська рада повідомляє, що 4 липня 2016 року на шостій сесії сьомого скликання Демидівської сільської ради прийнято рішення № 65-6-VІІ «Про встановлення місцевих податків та зборів на території Демидівської сільської ради на 2017 рік». ",paragraph2:"Для ознайомлення з рішенням сесії сільської ради «Про встановлення місцевих податків та зборів на території Демидівської сільської ради на 2017 рік» звертатись за адресою:",paragraph3:"07335, Демидівська сільська рада, Київська область, Вишгородський район, с. Демидів, вул. Фастова, 2, тел. (04596) 33-242."}]},{newsImgdate:[{img:"img/news_img/happy.jpg",month:"Лип.",day:"23"}],newsArticle:[{img:"img/news_img/happy.jpg",imgClass:"",title:"Приємні новини",author:"Lyudmila Sharay",link:"https://www.facebook.com/sharaylg?fref=nf",alert:"normal",paragraph1:"Шановні демидівці!Хочу поділитись приємною новиною - у будівлі колишнього табору праці і відпочинку, який знаходиться по вул. Богдана Хмельницького, є новий власник. Прилегла територія буде прибрана, огорожена і під охороною. Що буде в даній будівлі, власник ще не визначився, але, в процесі спілкування, зазначив, що хоче почути побажання демидівців."}]},{newsImgdate:[{img:"img/news_img/ambrozia.jpg",month:"Лип.",day:"27"}],newsArticle:[{img:"img/news_img/ambrozia.jpg",imgClass:"",title:"АМБРОЗІЯ - росте по всіх вулицях нашого села",author:"Iryna Pobidash",link:"https://www.facebook.com/iryna.pobidash?fref=nf",alert:"normal",paragraph1:"Ці фото зроблені на вулиці Гуреєва. Але небезпечна рослина - АМБРОЗІЯ - росте по всіх вулицях нашого села. Багато хто не підозрює, на скільки вона небезпечна. Зверніть увагу, бо починається найнебезпечніший період цвітіння амброзії.",paragraph2:"Ось лише маленька цитата про АМБРОЗІЮ: Амброзия — опастный сорняк-аллерген, который еще в прошлом веке пришел в Украину из Северной Америки, захватил наши поля и уверенно наступает на города.",paragraph3:"В период цветения амброзии (конец июля — середина сентября) многие люди испытывают сильный дискомфорт из-за аллергической реакции на ее пыльцу: насморк, слезотечение, зуд в глазах и носоглотке, кашель, вплоть до удушья.\n 				От аллергии никто не застрахован, и даже абсолютно здоровый человек может стать аллергиком, если пару недель подышит воздухом, в котором много пыльцы амброзии. Причем, заработанный таким образом недуг, практически неизлечим. Многие люди вынуждены просто уезжать куда-нибудь подальше во время цветения амброзии."}]},{newsImgdate:[{img:"img/news_img/meeting.jpg",month:"Сер.",day:"18"}],newsArticle:[{img:"img/news_img/meeting.jpg",imgClass:"",title:"Засідання постійної комісії з земельних відносин",author:"Lyudmila Sharay",link:"https://www.facebook.com/sharaylg?fref=nf",alert:"normal",paragraph1:"Повідомляю, що завтра, 19 серпня 2016 р. о 16.00 годині в приміщенні Демидівської сільської ради відбудеться засідання постійної комісії з питань регулювання земельних відносин, будівництва, благоустрою та охорони навколишнього природного середовища.",paragraph2:"На порядку денному питання виконання рішень постійної комісії, в тому числі і питання підготовки до опалювального сезону 2016-2017 рр.",paragraph3:"Засідання комісії відкрите. Запрошую жителів села, особливо житлового масиву по вул. Фастова."}]},{newsImgdate:[{img:"img/news_img/day_care.jpg",month:"Сер.",day:"26"}],newsArticle:[{img:"img/news_img/day_care.jpg",imgClass:"",title:"Група продовженого дня в дитячому садочку",author:"Vita Kovalenko",link:"https://www.facebook.com/vita.kovalenko.370?fref=nf",alert:"normal",paragraph1:"Всім доброго дня! Хочу повідомити що на сьогоднішній день обговорюється питання можливості створення групи продовженого дня в нашому дитячому садочку, яка буде працювати до 19:00 - 19:30. Для подальшого вирішення цього питання потрібно скласти список з підписами батьків, які бажають віддати свою дитину в таку групу. Список передамо завідуючій дитячим садочком. Будь-ласка батьки яким це цікаво з понеділка в кожній групі в роздягальні на підвіконні буде лежати аркуш паперу з ручкою на якому ви можете записали ім`я дитини і свої ініціали, підпис, номер телефону. Ще прохання,якщо є можливість повідомте про це іншим батькам."}]},{newsImgdate:[{img:"img/news_img/forest_school.jpg",month:"Вер.",day:"06"}],newsArticle:[{img:"img/news_img/forest_school.jpg",imgClass:"",title:"Школа англійської мови «FOREST SCHOOL»",author:"FOREST SCHOOL",link:"#",alert:"normal",paragraph1:"В селі Демидів відкрилася школа англійської мови «FOREST SCHOOL» (Форест Скул). Оголошується набір на групові заняття для дошкільнят та учнів.",paragraph2:"Деталі за телефоном: 066-176-08-81; 068-513-11-80."}]},{newsImgdate:[{img:"img/news_img/light_off.jpg",month:"Вер.",day:"16"}],newsArticle:[{img:"img/news_img/light_off.jpg",imgClass:"",title:"ДО УВАГИ ГРОМАДЯН!",author:"Вишгородський РЕМ",link:"http://www.koe.vsei.ua/koe/index.php?page=135",alert:"attention",paragraph1:"16 вересня 2016 року з 9.00 до 17.00 не буде електропостачання на вулицях: Стовпова, Св`ято-Михайлівська (Жовтнева), Васильєва, Маяковського, Масив Молодіжний, Шевченка, Київська, Варвари Довженко (Комсомольська), Річна, Вербова, Польова, Сонячна (Радянська),пров. Даценка"}]},{newsImgdate:[{img:"img/news_img/memory.jpg",month:"Вер.",day:"16"}],newsArticle:[{img:"img/news_img/memory.jpg",imgClass:"",title:"Вшанування загиблих в війні земляків",author:"Iryna Pobidash",link:"https://www.facebook.com/iryna.pobidash?fref=nf",alert:"normal",paragraph1:"Дорогі мої односельці. Проанонсую величезний захід, який пройде в Демидові 1 жовтня. Оргкомітет, який складається із спортсменів (А.Філіпович, Катерина Прищепа, О. Костюченко і Dima Dmitrenko), учасника бойових дій-депутата сільради Игорь Тигнеев , мене, як депутата райради, на чолі з вдовою загиблого Таня Костюченко визначились із форматом проведення заходів вшанування загиблих в війні на сході України наших земляків.",paragraph2:"Олександр Горган, Ростислав Кириченко, Marina Spiridonova-Melnik, відділ культури Вишгородської РДА відгукнулись на нашу ініціативу і допомагають у організації заходу.",paragraph3:'В програмі заходу: *урочисте відкриття; *спартакіада (від веселих змагань для малюків до ігрових, важко- та легкоатлетичних та інтелектуальних видів спорту для дітей та дорослих); *концерт дитячої творчості району; *каша; *забави для малят тощо. Вже дав згоду допомогти у нагородженні переможців турніру та учасників концерту #зоопарк "12місяців". Сценарій і регламент розробляється. Ідеї і допомога приймаються з вдячністю! Будемо раді прийняти в селі гостей зі всього району.'}]},{newsImgdate:[{img:"img/news_img/medichna-dopomoga.jpg",month:"Вер.",day:"23"}],newsArticle:[{img:"img/news_img/medichna-dopomoga.jpg",imgClass:"",title:"Допомога для односельців",author:"Iryna Pobidash",link:"https://www.facebook.com/iryna.pobidash?fref=nf",alert:"normal",paragraph1:"Якщо Ви знаєте людей, які в даний час потребують допомоги на лікування (складні випадки), передайте їм мій телефон 0964649669. Маю можливість частково допомогти."}]},{newsImgdate:[{img:"img/news_img/holiday.jpg",month:"Вер.",day:"24"}],newsArticle:[{img:"img/news_img/holiday.jpg",imgClass:"big-picture",title:"Вшанування загиблих в війні земляків",author:"Iryna Pobidash",link:"https://www.facebook.com/iryna.pobidash?fref=nf",alert:"attention",paragraph1:""}]},{newsImgdate:[{img:"img/news_img/job_obolon.jpg",month:"Жов.",day:"02"}],newsArticle:[{img:"img/news_img/job_obolon.jpg",imgClass:"big-picture",title:"Робота для молодих та енергійних",author:"'ПАТ' ОБОЛОНЬ",link:"http://www.obolon.ua/",alert:"normal",paragraph1:""}]},{newsImgdate:[{img:"img/news_img/uvaga.jpg",month:"Жов.",day:"11"}],newsArticle:[{img:"img/news_img/uvaga.jpg",imgClass:"",title:"ДО УВАГИ ГРОМАДЯН!",author:"'КП Демидівкомунгосп'",link:"",alert:"attention",paragraph1:"КП Демидівкомунгосп повідомляє, що 13.10.2016р. о 12 год. бде проводитись випробування системи теплопостачання. Прохання простежити за системою теплопостачання власних квартир."}]}]},newjsonNews=jsonNews.section.reverse(),templateInfo=document.getElementById("news-template").innerHTML,template=Handlebars.compile(templateInfo),templateData=template(jsonNews);document.getElementById("news").innerHTML+=templateData;
//# sourceMappingURL=data:application/json;base64,
